{"ast":null,"code":"var _jsxFileName = \"/Users/wangxiaoxu/Documents/project/bchain/substrate-front-end-template/src/Kitties.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Form, Grid } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\nimport KittyCards from './KittyCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Kitties(props) {\n  _s();\n\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  const {\n    accountPair\n  } = props;\n  const [kitties, setKitties] = useState([]);\n  const [status, setStatus] = useState(''); // Kitties' DNAs\n\n  const [kittyDNAs, setKittyDNAs] = useState([]); // Kitties' Owners\n\n  const [kittyOwners, setKittyOwners] = useState([]);\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n    let unsubscribe;\n    api.query.kittiesModule.kittiesCount(cnt => {\n      if (cnt !== '') {\n        // The amounts of all kitties.\n        const kittyIds = Array.from(Array(parseInt(cnt, 10)), (v, k) => k); // The owners of all kitties.\n\n        api.query.kittiesModule.owner.multi(kittyIds, kittyOwners => {\n          setKittyOwners(kittyOwners);\n        }).catch(console.error); // The DNAs of all kitties.\n\n        api.query.kittiesModule.kitties.multi(kittyIds, kittyDna => {\n          setKittyDNAs(kittyDna);\n        }).catch(console.error);\n      }\n    }).then(unsub => {\n      unsubscribe = unsub;\n    }).catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  };\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n    const kitties = [];\n\n    for (let i = 0; i < kittyDNAs.length; ++i) {\n      const kitty = {};\n      kitty.id = i;\n      kitty.dna = kittyDNAs[i].unwrap();\n      kitty.owner = keyring.encodeAddress(kittyOwners[i].unwrap());\n      kitties[i] = kitty;\n    }\n\n    setKitties(kitties);\n  };\n\n  useEffect(fetchKitties, [api, keyring]);\n  useEffect(populateKitties, [keyring, kittyDNAs, kittyOwners]);\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    width: 16,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u5C0F\\u6BDB\\u5B69\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(KittyCards, {\n      kitties: kitties,\n      accountPair: accountPair,\n      setStatus: setStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: '1em 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Form.Field, {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(TxButton, {\n          accountPair: accountPair,\n          label: \"\\u521B\\u5EFA\\u5C0F\\u6BDB\\u5B69\",\n          type: \"SIGNED-TX\",\n          setStatus: setStatus,\n          attrs: {\n            palletRpc: 'kittiesModule',\n            callable: 'create',\n            inputParams: [],\n            paramFields: []\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowWrap: 'break-word'\n      },\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Kitties, \"cnk4Bprg+p398T1k0xZ/sdQZzF0=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Kitties;\n\nvar _c;\n\n$RefreshReg$(_c, \"Kitties\");","map":{"version":3,"sources":["/Users/wangxiaoxu/Documents/project/bchain/substrate-front-end-template/src/Kitties.js"],"names":["React","useEffect","useState","Form","Grid","useSubstrate","TxButton","KittyCards","Kitties","props","api","keyring","accountPair","kitties","setKitties","status","setStatus","kittyDNAs","setKittyDNAs","kittyOwners","setKittyOwners","fetchKitties","unsubscribe","query","kittiesModule","kittiesCount","cnt","kittyIds","Array","from","parseInt","v","k","owner","multi","catch","console","error","kittyDna","then","unsub","populateKitties","i","length","kitty","id","dna","unwrap","encodeAddress","margin","textAlign","palletRpc","callable","inputParams","paramFields","overflowWrap"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Grid } from 'semantic-ui-react'\n\nimport { useSubstrate } from './substrate-lib'\nimport { TxButton } from './substrate-lib/components'\n\nimport KittyCards from './KittyCards'\n\nexport default function Kitties (props) {\n  const { api, keyring } = useSubstrate()\n  const { accountPair } = props\n\n  const [kitties, setKitties] = useState([])\n  const [status, setStatus] = useState('')\n  // Kitties' DNAs\n  const [kittyDNAs, setKittyDNAs] = useState([])\n  // Kitties' Owners\n  const [kittyOwners, setKittyOwners] = useState([])\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n\n    let unsubscribe\n    api.query.kittiesModule.kittiesCount(cnt => {\n      if (cnt !== '') {\n        // The amounts of all kitties.\n        const kittyIds = Array.from(Array(parseInt(cnt, 10)), (v, k) => k)\n        // The owners of all kitties.\n        api.query.kittiesModule.owner.multi(kittyIds, kittyOwners => {\n          setKittyOwners(kittyOwners)\n        }).catch(console.error)\n        // The DNAs of all kitties.\n        api.query.kittiesModule.kitties.multi(kittyIds, kittyDna => {\n          setKittyDNAs(kittyDna)\n        }).catch(console.error)\n      }\n    }).then(unsub => {\n      unsubscribe = unsub\n    }).catch(console.error)\n\n    return () => unsubscribe && unsubscribe()\n  }\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n\n    const kitties = []\n    for (let i = 0; i < kittyDNAs.length; ++i) {\n      const kitty = {}\n      kitty.id = i\n      kitty.dna = kittyDNAs[i].unwrap()\n      kitty.owner = keyring.encodeAddress(kittyOwners[i].unwrap())\n      kitties[i] = kitty\n    }\n    setKitties(kitties)\n  }\n\n  useEffect(fetchKitties, [api, keyring])\n  useEffect(populateKitties, [keyring, kittyDNAs, kittyOwners])\n\n  return <Grid.Column width={16}>\n    <h1>小毛孩</h1>\n    <KittyCards kitties={kitties} accountPair={accountPair} setStatus={setStatus}/>\n    <Form style={{ margin: '1em 0' }}>\n      <Form.Field style={{ textAlign: 'center' }}>\n        <TxButton\n          accountPair={accountPair} label='创建小毛孩' type='SIGNED-TX' setStatus={setStatus}\n          attrs={{\n            palletRpc: 'kittiesModule',\n            callable: 'create',\n            inputParams: [],\n            paramFields: []\n          }}\n        />\n      </Form.Field>\n    </Form>\n    <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n  </Grid.Column>\n}"]},"metadata":{},"sourceType":"module"}