{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { assert, isNumber, isUndefined, stringify } from '@polkadot/util';\nimport { TypeDefInfo } from \"./types.js\";\n\nconst stringIdentity = value => value.toString();\n\nconst INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];\nexport function paramsNotation(outer, inner, transform = stringIdentity) {\n  return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>` : ''}`;\n}\n\nfunction encodeWithParams(registry, typeDef, outer) {\n  const {\n    info,\n    sub\n  } = typeDef;\n\n  switch (info) {\n    case TypeDefInfo.BTreeMap:\n    case TypeDefInfo.BTreeSet:\n    case TypeDefInfo.Compact:\n    case TypeDefInfo.HashMap:\n    case TypeDefInfo.Linkage:\n    case TypeDefInfo.Option:\n    case TypeDefInfo.Result:\n    case TypeDefInfo.Vec:\n      return paramsNotation(outer, sub, param => encodeTypeDef(registry, param));\n  }\n\n  throw new Error(`Unable to encode ${stringify(typeDef)} with params`);\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction encodeDoNotConstruct(registry, {\n  displayName\n}) {\n  return `DoNotConstruct<${displayName || 'Unknown'}>`;\n}\n\nfunction encodeSubTypes(registry, sub, asEnum, extra) {\n  const names = sub.map(({\n    name\n  }) => name);\n  assert(names.every(n => !!n), () => `Subtypes does not have consistent names, ${names.join(', ')}`);\n  const inner = sub.reduce((result, type) => _objectSpread(_objectSpread({}, result), {}, {\n    [type.name]: encodeTypeDef(registry, type)\n  }), _objectSpread({}, extra));\n  return stringify(asEnum ? {\n    _enum: inner\n  } : inner);\n}\n\nfunction encodeEnum(registry, typeDef) {\n  assert(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Enum type');\n  const sub = typeDef.sub; // c-like enums have all Null entries\n  // TODO We need to take the disciminant into account and auto-add empty entries\n\n  return sub.every(({\n    type\n  }) => type === 'Null') ? stringify({\n    _enum: sub.map(({\n      name\n    }, index) => `${name || `Empty${index}`}`)\n  }) : encodeSubTypes(registry, sub, true);\n}\n\nfunction encodeStruct(registry, typeDef) {\n  assert(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Struct type');\n  return encodeSubTypes(registry, typeDef.sub, false, _objectSpread({}, typeDef.alias ? {\n    _alias: [...typeDef.alias.entries()].reduce((all, [k, v]) => _objectSpread(_objectSpread({}, all), {}, {\n      [k]: v\n    }), {})\n  } : {}));\n}\n\nfunction encodeTuple(registry, typeDef) {\n  assert(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Tuple type');\n  return `(${typeDef.sub.map(type => encodeTypeDef(registry, type)).join(',')})`;\n}\n\nfunction encodeUInt(registry, {\n  length\n}, type) {\n  assert(isNumber(length), 'Unable to encode VecFixed type');\n  return `${type}<${length}>`;\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction encodeVecFixed(registry, {\n  length,\n  sub\n}) {\n  assert(isNumber(length) && !isUndefined(sub) && !Array.isArray(sub), 'Unable to encode VecFixed type');\n  return `[${sub.type};${length}]`;\n} // We setup a record here to ensure we have comprehensive coverage (any item not covered will result\n// in a compile-time error with the missing index)\n\n\nconst encoders = {\n  [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),\n  [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),\n  [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),\n  [TypeDefInfo.DoNotConstruct]: (registry, typeDef) => encodeDoNotConstruct(registry, typeDef),\n  [TypeDefInfo.Enum]: (registry, typeDef) => encodeEnum(registry, typeDef),\n  [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),\n  [TypeDefInfo.Int]: (registry, typeDef) => encodeUInt(registry, typeDef, 'Int'),\n  [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Null]: (registry, typeDef) => 'Null',\n  [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Plain]: (registry, typeDef) => typeDef.displayName || typeDef.type,\n  [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, typeDef.type.includes('RangeInclusive') ? 'RangeInclusive' : 'Range'),\n  [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Set]: (registry, typeDef) => typeDef.type,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Si]: (registry, typeDef) => typeDef.lookupName || typeDef.type,\n  [TypeDefInfo.Struct]: (registry, typeDef) => encodeStruct(registry, typeDef),\n  [TypeDefInfo.Tuple]: (registry, typeDef) => encodeTuple(registry, typeDef),\n  [TypeDefInfo.UInt]: (registry, typeDef) => encodeUInt(registry, typeDef, 'UInt'),\n  [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),\n  [TypeDefInfo.VecFixed]: (registry, typeDef) => encodeVecFixed(registry, typeDef)\n};\n\nfunction encodeType(registry, typeDef, withLookup = true) {\n  const encoder = encoders[typeDef.info];\n  assert(encoder, () => `Cannot encode type ${stringify(typeDef)}`);\n  return withLookup && typeDef.lookupName ? typeDef.lookupName : encoder(registry, typeDef);\n}\n\nexport function encodeTypeDef(registry, typeDef) {\n  assert(!isUndefined(typeDef.info), () => `Invalid type definition with no instance info, typeDef=${stringify(typeDef)}`); // In the case of contracts we do have the unfortunate situation where the displayName would\n  // refer to \"Option\" when it is an option. For these, string it out, only using when actually\n  // not a top-level element to be used\n\n  if (typeDef.displayName && !INFO_WRAP.some(i => typeDef.displayName === i)) {\n    return typeDef.displayName;\n  }\n\n  return encodeType(registry, typeDef);\n}\nexport function withTypeString(registry, typeDef) {\n  return _objectSpread(_objectSpread({}, typeDef), {}, {\n    type: encodeType(registry, typeDef, false)\n  });\n}","map":{"version":3,"sources":["/Users/wangxiaoxu/Documents/project/bchain/substrate-front-end-template/node_modules/@polkadot/types/create/encodeTypes.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","assert","isNumber","isUndefined","stringify","TypeDefInfo","stringIdentity","value","toString","INFO_WRAP","paramsNotation","outer","inner","transform","Array","isArray","map","join","encodeWithParams","registry","typeDef","info","sub","BTreeMap","BTreeSet","Compact","HashMap","Linkage","Option","Result","Vec","param","encodeTypeDef","Error","encodeDoNotConstruct","displayName","encodeSubTypes","asEnum","extra","names","name","every","n","reduce","result","type","_enum","encodeEnum","index","encodeStruct","alias","_alias","entries","all","k","v","encodeTuple","encodeUInt","encodeVecFixed","encoders","DoNotConstruct","Enum","Int","Null","Plain","Range","includes","Set","Si","lookupName","Struct","Tuple","UInt","VecFixed","encodeType","withLookup","encoder","some","withTypeString"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isNumber, isUndefined, stringify } from '@polkadot/util';\nimport { TypeDefInfo } from \"./types.js\";\n\nconst stringIdentity = value => value.toString();\n\nconst INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];\nexport function paramsNotation(outer, inner, transform = stringIdentity) {\n  return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>` : ''}`;\n}\n\nfunction encodeWithParams(registry, typeDef, outer) {\n  const {\n    info,\n    sub\n  } = typeDef;\n\n  switch (info) {\n    case TypeDefInfo.BTreeMap:\n    case TypeDefInfo.BTreeSet:\n    case TypeDefInfo.Compact:\n    case TypeDefInfo.HashMap:\n    case TypeDefInfo.Linkage:\n    case TypeDefInfo.Option:\n    case TypeDefInfo.Result:\n    case TypeDefInfo.Vec:\n      return paramsNotation(outer, sub, param => encodeTypeDef(registry, param));\n  }\n\n  throw new Error(`Unable to encode ${stringify(typeDef)} with params`);\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction encodeDoNotConstruct(registry, {\n  displayName\n}) {\n  return `DoNotConstruct<${displayName || 'Unknown'}>`;\n}\n\nfunction encodeSubTypes(registry, sub, asEnum, extra) {\n  const names = sub.map(({\n    name\n  }) => name);\n  assert(names.every(n => !!n), () => `Subtypes does not have consistent names, ${names.join(', ')}`);\n  const inner = sub.reduce((result, type) => _objectSpread(_objectSpread({}, result), {}, {\n    [type.name]: encodeTypeDef(registry, type)\n  }), _objectSpread({}, extra));\n  return stringify(asEnum ? {\n    _enum: inner\n  } : inner);\n}\n\nfunction encodeEnum(registry, typeDef) {\n  assert(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Enum type');\n  const sub = typeDef.sub; // c-like enums have all Null entries\n  // TODO We need to take the disciminant into account and auto-add empty entries\n\n  return sub.every(({\n    type\n  }) => type === 'Null') ? stringify({\n    _enum: sub.map(({\n      name\n    }, index) => `${name || `Empty${index}`}`)\n  }) : encodeSubTypes(registry, sub, true);\n}\n\nfunction encodeStruct(registry, typeDef) {\n  assert(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Struct type');\n  return encodeSubTypes(registry, typeDef.sub, false, _objectSpread({}, typeDef.alias ? {\n    _alias: [...typeDef.alias.entries()].reduce((all, [k, v]) => _objectSpread(_objectSpread({}, all), {}, {\n      [k]: v\n    }), {})\n  } : {}));\n}\n\nfunction encodeTuple(registry, typeDef) {\n  assert(typeDef.sub && Array.isArray(typeDef.sub), 'Unable to encode Tuple type');\n  return `(${typeDef.sub.map(type => encodeTypeDef(registry, type)).join(',')})`;\n}\n\nfunction encodeUInt(registry, {\n  length\n}, type) {\n  assert(isNumber(length), 'Unable to encode VecFixed type');\n  return `${type}<${length}>`;\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction encodeVecFixed(registry, {\n  length,\n  sub\n}) {\n  assert(isNumber(length) && !isUndefined(sub) && !Array.isArray(sub), 'Unable to encode VecFixed type');\n  return `[${sub.type};${length}]`;\n} // We setup a record here to ensure we have comprehensive coverage (any item not covered will result\n// in a compile-time error with the missing index)\n\n\nconst encoders = {\n  [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),\n  [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),\n  [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),\n  [TypeDefInfo.DoNotConstruct]: (registry, typeDef) => encodeDoNotConstruct(registry, typeDef),\n  [TypeDefInfo.Enum]: (registry, typeDef) => encodeEnum(registry, typeDef),\n  [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),\n  [TypeDefInfo.Int]: (registry, typeDef) => encodeUInt(registry, typeDef, 'Int'),\n  [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Null]: (registry, typeDef) => 'Null',\n  [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Plain]: (registry, typeDef) => typeDef.displayName || typeDef.type,\n  [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, typeDef.type.includes('RangeInclusive') ? 'RangeInclusive' : 'Range'),\n  [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Set]: (registry, typeDef) => typeDef.type,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Si]: (registry, typeDef) => typeDef.lookupName || typeDef.type,\n  [TypeDefInfo.Struct]: (registry, typeDef) => encodeStruct(registry, typeDef),\n  [TypeDefInfo.Tuple]: (registry, typeDef) => encodeTuple(registry, typeDef),\n  [TypeDefInfo.UInt]: (registry, typeDef) => encodeUInt(registry, typeDef, 'UInt'),\n  [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),\n  [TypeDefInfo.VecFixed]: (registry, typeDef) => encodeVecFixed(registry, typeDef)\n};\n\nfunction encodeType(registry, typeDef, withLookup = true) {\n  const encoder = encoders[typeDef.info];\n  assert(encoder, () => `Cannot encode type ${stringify(typeDef)}`);\n  return withLookup && typeDef.lookupName ? typeDef.lookupName : encoder(registry, typeDef);\n}\n\nexport function encodeTypeDef(registry, typeDef) {\n  assert(!isUndefined(typeDef.info), () => `Invalid type definition with no instance info, typeDef=${stringify(typeDef)}`); // In the case of contracts we do have the unfortunate situation where the displayName would\n  // refer to \"Option\" when it is an option. For these, string it out, only using when actually\n  // not a top-level element to be used\n\n  if (typeDef.displayName && !INFO_WRAP.some(i => typeDef.displayName === i)) {\n    return typeDef.displayName;\n  }\n\n  return encodeType(registry, typeDef);\n}\nexport function withTypeString(registry, typeDef) {\n  return _objectSpread(_objectSpread({}, typeDef), {}, {\n    type: encodeType(registry, typeDef, false)\n  });\n}"]},"metadata":{},"sourceType":"module"}