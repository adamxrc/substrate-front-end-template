{"ast":null,"code":"var _jsxFileName = \"/Users/wangxiaoxu/Documents/project/bchain/substrate-front-end-template/src/PoeModule.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// React and Semantic UI elements.\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Grid, Message } from 'semantic-ui-react'; // Pre-built Substrate front-end utilities for connecting to a node\n// and making a transaction.\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components'; // Polkadot-JS utilities for hashing data.\n\nimport { blake2AsHex } from '@polkadot/util-crypto'; // Our main Proof Of Existence Component which is exported.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Main(props) {\n  _s();\n\n  // Establish an API to talk to our Substrate node.\n  const {\n    api\n  } = useSubstrate(); // Get the selected user from the `AccountSelector` component.\n\n  const {\n    accountPair\n  } = props; // React hooks for all the state variables we track.\n  // Learn more at: https://reactjs.org/docs/hooks-intro.html\n\n  const [status, setStatus] = useState('');\n  const [digest, setDigest] = useState('');\n  const [owner, setOwner] = useState('');\n  const [block, setBlock] = useState(0); // Our `FileReader()` which is accessible from our functions below.\n\n  let fileReader; // Takes our file, and creates a digest using the Blake2 256 hash function.\n\n  const bufferToDigest = () => {\n    // Turns the file content to a hexadecimal representation.\n    const content = Array.from(new Uint8Array(fileReader.result)).map(b => b.toString(16).padStart(2, '0')).join('');\n    const hash = blake2AsHex(content, 256);\n    setDigest(hash);\n  }; // Callback function for when a new file is selected.\n\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = bufferToDigest;\n    fileReader.readAsArrayBuffer(file);\n  }; // React hook to update the owner and block number information for a file.\n\n\n  useEffect(() => {\n    let unsubscribe; // Polkadot-JS API query to the `proofs` storage item in our pallet.\n    // This is a subscription, so it will always get the latest value,\n    // even if it changes.\n\n    api.query.poeModule.proofs(digest, result => {\n      // Our storage item returns a tuple, which is represented as an array.\n      print(result[0].toString());\n      print(result[1].toString());\n      setOwner(result[0].toString());\n      setBlock(result[1].toNumber());\n    }).then(unsub => {\n      unsubscribe = unsub;\n    });\n    return () => unsubscribe && unsubscribe(); // This tells the React hook to update whenever the file digest changes\n    // (when a new file is chosen), or when the storage subscription says the\n    // value of the storage item has updated.\n  }, [digest, api.query.poeModule]); // We can say a file digest is claimed if the stored block number is not 0.\n\n  function isClaimed() {\n    return block !== 0;\n  } // The actual UI elements which are returned from our component.\n\n\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Proof Of Existence\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      success: !!digest && !isClaimed(),\n      warning: isClaimed(),\n      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"file\",\n          id: \"file\",\n          label: \"Your File\",\n          onChange: e => handleFileChosen(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Message, {\n          success: true,\n          header: \"File Digest Unclaimed\",\n          content: digest\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Message, {\n          warning: true,\n          header: \"File Digest Claimed\",\n          list: [digest, `Owner: ${owner}`, `Block: ${block}`]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(TxButton, {\n          accountPair: accountPair,\n          label: 'Create Claim',\n          setStatus: setStatus,\n          type: \"SIGNED-TX\",\n          disabled: isClaimed() || !digest,\n          attrs: {\n            palletRpc: 'poeModule',\n            callable: 'createClaim',\n            inputParams: [digest],\n            paramFields: [true]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TxButton, {\n          accountPair: accountPair,\n          label: \"Revoke Claim\",\n          setStatus: setStatus,\n          type: \"SIGNED-TX\",\n          disabled: !isClaimed() || owner !== accountPair.address,\n          attrs: {\n            palletRpc: 'poeModule',\n            callable: 'revokeClaim',\n            inputParams: [digest],\n            paramFields: [true]\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          overflowWrap: 'break-word'\n        },\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"85tMW+2RfsaOIJp7vCkoGtHi+Rw=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Main;\nexport default function PoeModule(props) {\n  _s2();\n\n  const {\n    api\n  } = useSubstrate();\n  return api.query.poeModule && api.query.poeModule.proofs ? /*#__PURE__*/_jsxDEV(Main, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 7\n  }, this) : null;\n}\n\n_s2(PoeModule, \"a5IVjGvlzdb5yuE5zCYn+JGZcoo=\", false, function () {\n  return [useSubstrate];\n});\n\n_c2 = PoeModule;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"PoeModule\");","map":{"version":3,"sources":["/Users/wangxiaoxu/Documents/project/bchain/substrate-front-end-template/src/PoeModule.js"],"names":["React","useState","useEffect","Form","Input","Grid","Message","useSubstrate","TxButton","blake2AsHex","Main","props","api","accountPair","status","setStatus","digest","setDigest","owner","setOwner","block","setBlock","fileReader","bufferToDigest","content","Array","from","Uint8Array","result","map","b","toString","padStart","join","hash","handleFileChosen","file","FileReader","onloadend","readAsArrayBuffer","unsubscribe","query","poeModule","proofs","print","toNumber","then","unsub","isClaimed","e","target","files","palletRpc","callable","inputParams","paramFields","address","overflowWrap","PoeModule"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,OAA5B,QAA2C,mBAA3C,C,CACA;AACA;;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAT,QAAyB,4BAAzB,C,CACA;;AACA,SAASC,WAAT,QAA4B,uBAA5B,C,CAEA;;;AACA,OAAO,SAASC,IAAT,CAAeC,KAAf,EAAsB;AAAA;;AAC3B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAUL,YAAY,EAA5B,CAF2B,CAG3B;;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAkBF,KAAxB,CAJ2B,CAK3B;AACA;;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,CAAD,CAAlC,CAV2B,CAY3B;;AACA,MAAIqB,UAAJ,CAb2B,CAe3B;;AACA,QAAMC,cAAc,GAAG,MAAM;AAC3B;AACA,UAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,UAAJ,CAAeL,UAAU,CAACM,MAA1B,CAAX,EACbC,GADa,CACRC,CAAD,IAAOA,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CADE,EAEbC,IAFa,CAER,EAFQ,CAAhB;AAIA,UAAMC,IAAI,GAAGzB,WAAW,CAACe,OAAD,EAAU,GAAV,CAAxB;AACAP,IAAAA,SAAS,CAACiB,IAAD,CAAT;AACD,GARD,CAhB2B,CA0B3B;;;AACA,QAAMC,gBAAgB,GAAIC,IAAD,IAAU;AACjCd,IAAAA,UAAU,GAAG,IAAIe,UAAJ,EAAb;AACAf,IAAAA,UAAU,CAACgB,SAAX,GAAuBf,cAAvB;AACAD,IAAAA,UAAU,CAACiB,iBAAX,CAA6BH,IAA7B;AACD,GAJD,CA3B2B,CAiC3B;;;AACAlC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsC,WAAJ,CADc,CAGd;AACA;AACA;;AACA5B,IAAAA,GAAG,CAAC6B,KAAJ,CAAUC,SAAV,CACGC,MADH,CACU3B,MADV,EACmBY,MAAD,IAAY;AAC1B;AACAgB,MAAAA,KAAK,CAAChB,MAAM,CAAC,CAAD,CAAN,CAAUG,QAAV,EAAD,CAAL;AACAa,MAAAA,KAAK,CAAChB,MAAM,CAAC,CAAD,CAAN,CAAUG,QAAV,EAAD,CAAL;AACAZ,MAAAA,QAAQ,CAACS,MAAM,CAAC,CAAD,CAAN,CAAUG,QAAV,EAAD,CAAR;AACAV,MAAAA,QAAQ,CAACO,MAAM,CAAC,CAAD,CAAN,CAAUiB,QAAV,EAAD,CAAR;AACD,KAPH,EAQGC,IARH,CAQSC,KAAD,IAAW;AACfP,MAAAA,WAAW,GAAGO,KAAd;AACD,KAVH;AAYA,WAAO,MAAMP,WAAW,IAAIA,WAAW,EAAvC,CAlBc,CAmBd;AACA;AACA;AACD,GAtBQ,EAsBN,CAACxB,MAAD,EAASJ,GAAG,CAAC6B,KAAJ,CAAUC,SAAnB,CAtBM,CAAT,CAlC2B,CA0D3B;;AACA,WAASM,SAAT,GAAsB;AACpB,WAAO5B,KAAK,KAAK,CAAjB;AACD,GA7D0B,CA+D3B;;;AACA,sBACE,QAAC,IAAD,CAAM,MAAN;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAE,CAAC,CAACJ,MAAF,IAAY,CAACgC,SAAS,EAArC;AAAyC,MAAA,OAAO,EAAEA,SAAS,EAA3D;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAA,gCAEE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,EAAE,EAAC,MAFL;AAGE,UAAA,KAAK,EAAC,WAHR;AAIE,UAAA,QAAQ,EAAGC,CAAC,IAAId,gBAAgB,CAACc,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD;AAJlC;AAAA;AAAA;AAAA;AAAA,gBAFF,eASE,QAAC,OAAD;AAAS,UAAA,OAAO,MAAhB;AAAiB,UAAA,MAAM,EAAC,uBAAxB;AAAgD,UAAA,OAAO,EAAEnC;AAAzD;AAAA;AAAA;AAAA;AAAA,gBATF,eAWE,QAAC,OAAD;AACE,UAAA,OAAO,MADT;AAEE,UAAA,MAAM,EAAC,qBAFT;AAGE,UAAA,IAAI,EAAE,CAACA,MAAD,EAAU,UAASE,KAAM,EAAzB,EAA6B,UAASE,KAAM,EAA5C;AAHR;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAmBE,QAAC,IAAD,CAAM,KAAN;AAAA,gCAGE,QAAC,QAAD;AACE,UAAA,WAAW,EAAEP,WADf;AAEE,UAAA,KAAK,EAAE,cAFT;AAGE,UAAA,SAAS,EAAEE,SAHb;AAIE,UAAA,IAAI,EAAC,WAJP;AAKE,UAAA,QAAQ,EAAEiC,SAAS,MAAM,CAAChC,MAL5B;AAME,UAAA,KAAK,EAAE;AACLoC,YAAAA,SAAS,EAAE,WADN;AAELC,YAAAA,QAAQ,EAAE,aAFL;AAGLC,YAAAA,WAAW,EAAE,CAACtC,MAAD,CAHR;AAILuC,YAAAA,WAAW,EAAE,CAAC,IAAD;AAJR;AANT;AAAA;AAAA;AAAA;AAAA,gBAHF,eAkBE,QAAC,QAAD;AACE,UAAA,WAAW,EAAE1C,WADf;AAEE,UAAA,KAAK,EAAC,cAFR;AAGE,UAAA,SAAS,EAAEE,SAHb;AAIE,UAAA,IAAI,EAAC,WAJP;AAKE,UAAA,QAAQ,EAAE,CAACiC,SAAS,EAAV,IAAgB9B,KAAK,KAAKL,WAAW,CAAC2C,OALlD;AAME,UAAA,KAAK,EAAE;AACLJ,YAAAA,SAAS,EAAE,WADN;AAELC,YAAAA,QAAQ,EAAE,aAFL;AAGLC,YAAAA,WAAW,EAAE,CAACtC,MAAD,CAHR;AAILuC,YAAAA,WAAW,EAAE,CAAC,IAAD;AAJR;AANT;AAAA;AAAA;AAAA;AAAA,gBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eAoDE;AAAK,QAAA,KAAK,EAAE;AAAEE,UAAAA,YAAY,EAAE;AAAhB,SAAZ;AAAA,kBAA6C3C;AAA7C;AAAA;AAAA;AAAA;AAAA,cApDF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4DD;;GA5HeJ,I;UAEEH,Y;;;KAFFG,I;AA8HhB,eAAe,SAASgD,SAAT,CAAoB/C,KAApB,EAA2B;AAAA;;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAUL,YAAY,EAA5B;AACA,SAAQK,GAAG,CAAC6B,KAAJ,CAAUC,SAAV,IAAuB9B,GAAG,CAAC6B,KAAJ,CAAUC,SAAV,CAAoBC,MAA3C,gBACJ,QAAC,IAAD,OAAUhC;AAAV;AAAA;AAAA;AAAA;AAAA,UADI,GACkB,IAD1B;AAED;;IAJuB+C,S;UACNnD,Y;;;MADMmD,S","sourcesContent":["// React and Semantic UI elements.\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Grid, Message } from 'semantic-ui-react';\n// Pre-built Substrate front-end utilities for connecting to a node\n// and making a transaction.\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n// Polkadot-JS utilities for hashing data.\nimport { blake2AsHex } from '@polkadot/util-crypto';\n\n// Our main Proof Of Existence Component which is exported.\nexport function Main (props) {\n  // Establish an API to talk to our Substrate node.\n  const { api } = useSubstrate();\n  // Get the selected user from the `AccountSelector` component.\n  const { accountPair } = props;\n  // React hooks for all the state variables we track.\n  // Learn more at: https://reactjs.org/docs/hooks-intro.html\n  const [status, setStatus] = useState('');\n  const [digest, setDigest] = useState('');\n  const [owner, setOwner] = useState('');\n  const [block, setBlock] = useState(0);\n\n  // Our `FileReader()` which is accessible from our functions below.\n  let fileReader;\n\n  // Takes our file, and creates a digest using the Blake2 256 hash function.\n  const bufferToDigest = () => {\n    // Turns the file content to a hexadecimal representation.\n    const content = Array.from(new Uint8Array(fileReader.result))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('');\n\n    const hash = blake2AsHex(content, 256);\n    setDigest(hash);\n  };\n\n  // Callback function for when a new file is selected.\n  const handleFileChosen = (file) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = bufferToDigest;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  // React hook to update the owner and block number information for a file.\n  useEffect(() => {\n    let unsubscribe;\n\n    // Polkadot-JS API query to the `proofs` storage item in our pallet.\n    // This is a subscription, so it will always get the latest value,\n    // even if it changes.\n    api.query.poeModule\n      .proofs(digest, (result) => {\n        // Our storage item returns a tuple, which is represented as an array.\n        print(result[0].toString());\n        print(result[1].toString());\n        setOwner(result[0].toString())\n        setBlock(result[1].toNumber())\n      })\n      .then((unsub) => {\n        unsubscribe = unsub;\n      });\n\n    return () => unsubscribe && unsubscribe();\n    // This tells the React hook to update whenever the file digest changes\n    // (when a new file is chosen), or when the storage subscription says the\n    // value of the storage item has updated.\n  }, [digest, api.query.poeModule]);\n\n  // We can say a file digest is claimed if the stored block number is not 0.\n  function isClaimed () {\n    return block !== 0;\n  }\n\n  // The actual UI elements which are returned from our component.\n  return (\n    <Grid.Column>\n      <h1>Proof Of Existence</h1>\n      {/* Show warning or success message if the file is or is not claimed. */}\n      <Form success={!!digest && !isClaimed()} warning={isClaimed()}>\n        <Form.Field>\n          {/* File selector with a callback to `handleFileChosen`. */}\n          <Input\n            type='file'\n            id='file'\n            label='Your File'\n            onChange={ e => handleFileChosen(e.target.files[0]) }\n          />\n          {/* Show this message if the file is available to be claimed */}\n          <Message success header='File Digest Unclaimed' content={digest} />\n          {/* Show this message if the file is already claimed. */}\n          <Message\n            warning\n            header='File Digest Claimed'\n            list={[digest, `Owner: ${owner}`, `Block: ${block}`]}\n          />\n        </Form.Field>\n        {/* Buttons for interacting with the component. */}\n        <Form.Field>\n          {/* Button to create a claim. Only active if a file is selected,\n          and not already claimed. Updates the `status`. */}\n          <TxButton\n            accountPair={accountPair}\n            label={'Create Claim'}\n            setStatus={setStatus}\n            type='SIGNED-TX'\n            disabled={isClaimed() || !digest}\n            attrs={{\n              palletRpc: 'poeModule',\n              callable: 'createClaim',\n              inputParams: [digest],\n              paramFields: [true]\n            }}\n          />\n          {/* Button to revoke a claim. Only active if a file is selected,\n          and is already claimed. Updates the `status`. */}\n          <TxButton\n            accountPair={accountPair}\n            label='Revoke Claim'\n            setStatus={setStatus}\n            type='SIGNED-TX'\n            disabled={!isClaimed() || owner !== accountPair.address}\n            attrs={{\n              palletRpc: 'poeModule',\n              callable: 'revokeClaim',\n              inputParams: [digest],\n              paramFields: [true]\n            }}\n          />\n        </Form.Field>\n        {/* Status message about the transaction. */}\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nexport default function PoeModule (props) {\n  const { api } = useSubstrate();\n  return (api.query.poeModule && api.query.poeModule.proofs\n    ? <Main {...props} /> : null);\n}"]},"metadata":{},"sourceType":"module"}