{"ast":null,"code":"var _jsxFileName = \"/Users/wangxiaoxu/Documents/project/bchain/substrate-front-end-template/src/Kitties.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Form, Grid } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\nimport KittyCards from './KittyCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Kitties(props) {\n  _s();\n\n  const {\n    api,\n    keyring\n  } = useSubstrate();\n  const {\n    accountPair\n  } = props;\n  const [kittyCnt, setKittyCnt] = useState(0);\n  const [kittyDNAs, setKittyDNAs] = useState([]);\n  const [kittyOwners, setKittyOwners] = useState([]);\n  const [kitties, setKitties] = useState([]);\n  const [status, setStatus] = useState('');\n\n  const fetchKittyCnt = () => {\n    let unsubscribe;\n    api.query.kittiesModule.kittiesCount(cnt => {\n      setKittyCnt(cnt);\n      console.log(`kitty count: ${cnt}`);\n    }).then(unsub => {\n      unsubscribe = unsub;\n    }).catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  };\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n    let unsubscribe;\n    let key_arr = [];\n\n    for (let i = 0; i < kittyCnt; i++) {\n      key_arr.push(i);\n    }\n\n    api.query.kittiesModule.kitties.multi(key_arr, kitties => {\n      setKittyDNAs(kitties.map(kitty => kitty.isSome && kitty.unwrap().toU8a()));\n    }).then(unsub => {\n      unsubscribe = unsub;\n    }).catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  };\n\n  const fetchKittyOwners = () => {\n    let unsubscribe;\n    let key_arr = [];\n\n    for (let i = 0; i < kittyCnt; i++) {\n      key_arr.push(i);\n    }\n\n    api.query.kittiesModule.owner.multi(key_arr, owners => {\n      setKittyOwners(owners.map(owner => owner.isSome && owner.unwrap().toHuman()));\n    }).then(unsub => {\n      unsubscribe = unsub;\n    }).catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  };\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n    const kittyIndices = [...Array(kittyCnt).keys()];\n    const kitties = kittyIndices.map(ind => ({\n      id: ind,\n      dna: kittyDNAs[ind],\n      owner: kittyOwners[ind]\n    }));\n    setKitties(kitties);\n  };\n\n  useEffect(fetchKittyCnt, [api, keyring]);\n  useEffect(fetchKitties, [kittyCnt]);\n  useEffect(fetchKittyOwners, [kittyDNAs]);\n  useEffect(populateKitties, [kittyOwners]);\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    width: 16,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u5C0F\\u6BDB\\u5B69\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(KittyCards, {\n      kitties: kitties,\n      accountPair: accountPair,\n      setStatus: setStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      style: {\n        margin: '1em 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(Form.Field, {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(TxButton, {\n          accountPair: accountPair,\n          label: \"\\u521B\\u5EFA\\u5C0F\\u6BDB\\u5B69\",\n          type: \"SIGNED-TX\",\n          setStatus: setStatus,\n          attrs: {\n            palletRpc: 'kittiesModule',\n            callable: 'create',\n            inputParams: [],\n            paramFields: []\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowWrap: 'break-word'\n      },\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Kitties, \"dBO3qr9VV2+CvQkZcqh4uh58e2E=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Kitties;\n\nvar _c;\n\n$RefreshReg$(_c, \"Kitties\");","map":{"version":3,"sources":["/Users/wangxiaoxu/Documents/project/bchain/substrate-front-end-template/src/Kitties.js"],"names":["React","useEffect","useState","Form","Grid","useSubstrate","TxButton","KittyCards","Kitties","props","api","keyring","accountPair","kittyCnt","setKittyCnt","kittyDNAs","setKittyDNAs","kittyOwners","setKittyOwners","kitties","setKitties","status","setStatus","fetchKittyCnt","unsubscribe","query","kittiesModule","kittiesCount","cnt","console","log","then","unsub","catch","error","fetchKitties","key_arr","i","push","multi","map","kitty","isSome","unwrap","toU8a","fetchKittyOwners","owner","owners","toHuman","populateKitties","kittyIndices","Array","keys","ind","id","dna","margin","textAlign","palletRpc","callable","inputParams","paramFields","overflowWrap"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Grid } from 'semantic-ui-react'\n\nimport { useSubstrate } from './substrate-lib'\nimport { TxButton } from './substrate-lib/components'\n\nimport KittyCards from './KittyCards'\n\nexport default function Kitties (props) {\n  const { api, keyring } = useSubstrate()\n  const { accountPair } = props\n\n  const [kittyCnt, setKittyCnt] = useState(0);\n  const [kittyDNAs, setKittyDNAs] = useState([]);\n  const [kittyOwners, setKittyOwners] = useState([]);\n  const [kitties, setKitties] = useState([])\n  const [status, setStatus] = useState('')\n\n  const fetchKittyCnt = () => {\n    let unsubscribe;\n    api.query.kittiesModule.kittiesCount((cnt) => {\n      setKittyCnt(cnt);\n      console.log(`kitty count: ${cnt}`);\n    }).then(unsub => {\n      unsubscribe = unsub;\n    }).catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  };\n\n  const fetchKitties = () => {\n    // TODO: 在这里调用 `api.query.kittiesModule.*` 函数去取得猫咪的信息。\n    // 你需要取得：\n    //   - 共有多少只猫咪\n    //   - 每只猫咪的主人是谁\n    //   - 每只猫咪的 DNA 是什么，用来组合出它的形态\n    let unsubscribe;\n    let key_arr = [];\n    for (let i=0; i<kittyCnt; i++) {\n      key_arr.push(i);\n    }    \n    api.query.kittiesModule.kitties.multi(key_arr, (kitties) => {\n      setKittyDNAs(kitties.map(kitty => kitty.isSome && kitty.unwrap().toU8a()));\n    }).then(unsub => {\n      unsubscribe = unsub;\n    }).catch(console.error);\n    return () => unsubscribe && unsubscribe();\n\n  }\n\n  const fetchKittyOwners = () => {\n    let unsubscribe;\n    let key_arr = [];\n    for (let i=0; i<kittyCnt; i++) {\n      key_arr.push(i);\n    }    \n    api.query.kittiesModule.owner.multi(key_arr, (owners) => {\n      setKittyOwners(owners.map(owner => owner.isSome && owner.unwrap().toHuman()));\n    }).then(unsub => {\n      unsubscribe = unsub;\n    }).catch(console.error);\n    return () => unsubscribe && unsubscribe();\n  };\n\n  const populateKitties = () => {\n    // TODO: 在这里添加额外的逻辑。你需要组成这样的数组结构：\n    //  ```javascript\n    //  const kitties = [{\n    //    id: 0,\n    //    dna: ...,\n    //    owner: ...\n    //  }, { id: ..., dna: ..., owner: ... }]\n    //  ```\n    // 这个 kitties 会传入 <KittyCards/> 然后对每只猫咪进行处理\n    const kittyIndices = [...Array(kittyCnt).keys()];\n    const kitties = kittyIndices.map(ind => ({\n      id: ind,\n      dna: kittyDNAs[ind],\n      owner: kittyOwners[ind]\n    }));\n    setKitties(kitties)\n  }\n\n  useEffect(fetchKittyCnt, [api, keyring]);\n  useEffect(fetchKitties, [kittyCnt]);\n  useEffect(fetchKittyOwners, [kittyDNAs]);\n  useEffect(populateKitties, [kittyOwners])\n\n  return <Grid.Column width={16}>\n    <h1>小毛孩</h1>\n    <KittyCards kitties={kitties} accountPair={accountPair} setStatus={setStatus}/>\n    <Form style={{ margin: '1em 0' }}>\n      <Form.Field style={{ textAlign: 'center' }}>\n        <TxButton\n          accountPair={accountPair} label='创建小毛孩' type='SIGNED-TX' setStatus={setStatus}\n          attrs={{\n            palletRpc: 'kittiesModule',\n            callable: 'create',\n            inputParams: [],\n            paramFields: []\n          }}\n        />\n      </Form.Field>\n    </Form>\n    <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n  </Grid.Column>\n}\n"]},"metadata":{},"sourceType":"module"}