"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.listenDevices = exports.setUsbDebounce = void 0;
var usb_detection_1 = __importDefault(require("usb-detection"));
var devices_1 = require("@ledgerhq/devices");
var logs_1 = require("@ledgerhq/logs");
var deviceToLog = function (_a) {
    var productId = _a.productId, locationId = _a.locationId, deviceAddress = _a.deviceAddress;
    return "productId=" + productId + " locationId=" + locationId + " deviceAddress=" + deviceAddress;
};
var usbDebounce = 1000;
var setUsbDebounce = function (n) {
    usbDebounce = n;
};
exports.setUsbDebounce = setUsbDebounce;
var monitoring = false;
var monitor = function () {
    if (!monitoring) {
        monitoring = true;
        usb_detection_1["default"].startMonitoring();
    }
    return function () { };
};
// No better way for now. see https://github.com/LedgerHQ/ledgerjs/issues/434
process.on("exit", function () {
    if (monitoring) {
        // redeem the monitoring so the process can be terminated.
        usb_detection_1["default"].stopMonitoring();
    }
});
var listenDevices = function (onAdd, onRemove) {
    var unmonitor = monitor();
    var addEvent = "add:" + devices_1.ledgerUSBVendorId;
    var removeEvent = "remove:" + devices_1.ledgerUSBVendorId;
    var timeout;
    var add = function (device) {
        (0, logs_1.log)("usb-detection", "add: " + deviceToLog(device));
        if (!timeout) {
            // a time is needed for the device to actually be connectable over HID..
            // we also take this time to not emit the device yet and potentially cancel it if a remove happens.
            timeout = setTimeout(function () {
                onAdd(device);
                timeout = null;
            }, usbDebounce);
        }
    };
    var remove = function (device) {
        (0, logs_1.log)("usb-detection", "remove: " + deviceToLog(device));
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
        else {
            onRemove(device);
        }
    };
    usb_detection_1["default"].on(addEvent, add);
    usb_detection_1["default"].on(removeEvent, remove);
    return function () {
        if (timeout)
            clearTimeout(timeout);
        // @ts-expect-error not all EventEmitter methods are covered in its definition file
        usb_detection_1["default"].off(addEvent, add);
        // @ts-expect-error not all EventEmitter methods are covered in its definition file
        usb_detection_1["default"].off(removeEvent, remove);
        unmonitor();
    };
};
exports.listenDevices = listenDevices;
//# sourceMappingURL=listenDevices.js.map